# -*- coding: utf-8 -*-
"""Pandas_-_Arquivo_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nVpTjV8rh4w8JYwuWeV7OXMwe-yW1ydf

# Pandas

- Alta performance e fácil uso para trabalhar com dados
- Tem muitas coisas que lembram o Excel
- O DataFrame é usado em várias outras bibliotecas de Ciência de Dados
- https://pandas.pydata.org/
<br><br>
- O Pandas vai <font color="blue">**desde a importação da base, passando por toda a análise exploratória até a exibição de gráficos** </font>
"""

# Importando o pandas
import pandas as pd

"""### Conseguimos importar praticamente todas as bases de dados usando o pandas

**Importar uma base em csv:** <br>
<font color="blue">**pd.read_csv(**</font>"arquivo_excel.xlsx"<font color="blue">**)**</font>
- O arquivo que vamos usar é o `titanic_train.csv`

### E também visualizar todas as informações sobre essa base
"""

# Visualizando as 5 primeiras linhas
base.head()

# Visualizando as 5 últimas linhas
base.tail()

# Tamanho da base
base.shape

# Visualizando primeiras e últimas linhas e tamanho da base
display(base)

"""### Além disso, também podemos ver as informações da base"""

# Mostrando somente o tipo dos dados
base.dtypes

# Mostrando o tipo de dados e os valores vazios
base.info()

# Contando os valores vazios por coluna
base.isnull().sum()

"""### Principais conceitos estatísticos"""

dados = {
    'X': [1,2,3,4,5,6,7,8,9,10,11]
}

dados = pd.DataFrame(dados)

# Mostrando a média
dados.mean()

# Mostrando a contagem de registros
dados.count()

# Mediana
dados.median()

# Desvio Padrão
dados.std()

# Trazendo todo o resumo estatístico utilizando o describe
dados.describe()

"""**Voltando para a base do nosso problema**"""

# Trazendo o resumo estatístico para a nossa base
base.describe()

"""### Escolhendo colunas da base

**Buscando por uma coluna:** <br>
"""

# Podemos usar o nome da coluna entre aspas
base['Survived']

# Ou usar o ponto
base.Survived

# Usando uma coluna, podemos contar a quantidade de vezes que cada valor aparece
base.Survived.value_counts()

# Selecionando um conjunto de colunas
base[['Survived','Sex','Age']]

"""### Também conseguimos fazer filtros na base"""

# Visualizando novamente na base
base.head()

# Verificando clientes que pagaram mais de 100 libras
base[base.Fare > 500]

# Verificando se tiveram clientes que pagaram menos de 5 libre
base[base.Fare < 5]

"""**Podemos fazer filtros usando E / OU**"""

# Verificando se alguém viajou com esposa E filhos
base[(base.Parch > 1) & (base.SibSp > 1)].head()

"""#### Uma forma muito útil de fazer seleção de dados é usando o <font color="blue">.loc()</font> ou o <font color="blue">.iloc()</font>"""

# O .loc() permite fazer a busca da mesma forma acima
base.loc[(base.Parch > 1) & (base.SibSp > 1)].head()

# Ele também permite usar argumentos lógicos
base.loc[(base.Parch > 1) | (base.SibSp > 1)].head()

# Ele permite filtrar colunas de forma muito prática
base.loc[(base.Parch > 1) | (base.SibSp > 1),['PassengerId','Parch','SibSp']].head()

"""**Já o <font color="blue">.iloc() </font> vai usar o índice para filtrar**"""

# Buscando as linhas de 30 (inclusive) a 40 (exclusive)
base.iloc[30:40]

# Também posso usar para buscar apenas colunas específicas
base.iloc[30:40,3:6]

"""### Por fim, conseguimos fazer gráficos com o Pandas de forma bem simples

- https://pandas.pydata.org/docs/user_guide/visualization.html
"""

import matplotlib.pyplot as plt

# É possível fazer um histograma simples
base.Fare.hist(bins=100);

# Gráficos de barras
base.Pclass.plot.bar();

base.Pclass.value_counts().plot.bar();

# E até gráficos mais complexos como o de densidade
base['Fare'].plot.kde();